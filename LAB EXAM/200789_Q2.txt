import numpy as np
import pandas as pd

def printBoard(board):
    print(board[1] + '|' + board[2] + '|' + board[3] + '|' + board[4])
    print('-+-+-+-')
    print(board[5] + '|' + board[6] + '|' + board[7] + '|' + board[8])
    print('-+-+-+-')
    print(board[9] + '|' + board[10] + '|' + board[11] + '|' + board[12])
    print('-+-+-+-')
    print(board[13] + '|' + board[14] + '|' + board[15] + '|' + board[16])
    print("\n")
    
    
def spaceIsFree(position):
    if board[position] == ' ':
        return True
    else:
        return False
        
def insertLetter(letter, position):
    if spaceIsFree(position):
        board[position] = letter
        printBoard(board)
        if (checkDraw()):
            print("Draw!")
            exit()
        if checkForWin():
            if letter == 'X':
                print("Bot wins!")
                exit()
            else:
                print("Player wins!")
                exit()

        return


    else:
        print("Can't insert there!")
        position = int(input("Please enter new position:  "))
        insertLetter(letter, position)
        return
        
def checkForWin():
    if (board[1] == board[2] and board[1] == board[3] and board[1] == board[4] and board[1] != ' '):
        return True
    elif (board[5] == board[6] and board[5] == board[7] and board[5] == board[8] and board[5] != ' '):
        return True
    elif (board[9] == board[10] and board[9] == board[11] and board[9] == board[12] and board[9] != ' '):
        return True
    elif (board[13] == board[14] and board[13] == board[15] and board[13] == board[16] and board[13] != ' '):
        return True
    
    elif (board[1] == board[5] and board[1] == board[9]and board[1] == board[13] and board[1] != ' '):
        return True
    elif (board[2] == board[6] and board[2] == board[10] and board[2] == board[14] and board[2] != ' '):
        return True
    elif (board[3] == board[7] and board[3] == board[11] and board[3] == board[15] and board[3] != ' '):
        return True
    elif (board[4] == board[8] and board[4] == board[12] and board[4] == board[16] and board[4] != ' '):
        return True
    
    elif (board[1] == board[6] and board[1] == board[11] and board[1] == board[16] and board[1] != ' '):
        return True
    elif (board[4] == board[7] and board[4] == board[10] and board[4] == board[13] and board[4] != ' '):
        return True
    
    elif (board[1] == board[2] and board[1] == board[3] and board[1] == board[4] and board[1] == board[6] and board[1] == board[7] and board[1] != ' '):
        return True
    else:
        return False
        
        
def checkDraw():
    for key in board.keys():
        if (board[key] == ' '):
            return False
    return True
    
    
def compMove():
    #bot = 'x'
    bestScore = -800
    bestMove = 0
    for key in board.keys():
        if (board[key] == ' '):
            board[key] = bot
            score = minimax(board, False)
            board[key] = ' '
            if (score >= bestScore):
                bestScore = score
                bestMove = key
    insertLetter(bot, bestMove)
    return
    

def checkWhichMarkWon(mark):
    if board[1] == board[2] and board[1] == board[3] and board[1] == board[4] and board[1] == mark:
        return True
    elif board[5] == board[6] and board[5] == board[7] and board[5] == board[8] and board[5] == mark:
        return True
    elif board[9] == board[10] and board[9] == board[11] and board[9] == board[12] and board[9] == mark:
        return True
    elif board[13] == board[14] and board[13] == board[15] and board[13] == board[16] and board[13] == mark:
        return True
    
    elif board[1] == board[5] and board[1] == board[9] and board[1] == board[13] and board[1] == mark:
        return True
    elif board[2] == board[6] and board[2] == board[10] and board[2] == board[14] and board[2] == mark:
        return True
    elif board[3] == board[7] and board[3] == board[11] and board[3] == board[15] and board[3] == mark:
        return True
    elif board[4] == board[8] and board[4] == board[12] and board[4] == board[16] and board[4] == mark:
        return True
    
    elif (board[1] == board[6] and board[1] == board[11] and board[1] == board[16] and board[1] == mark):
        return True
    elif (board[4] == board[7] and board[4] == board[10] and board[4] == board[13] and board[4] == mark):
        return True
    

    elif (board[1] == board[2] and board[1] == board[3] and board[1] == board[4] and board[1] == board[6] and board[1] == board[7] and board[1] == mark):
        return True
    
    else:
        return False
        
        
def minimax(board, isMaximizing):
    if (checkWhichMarkWon(bot)):
        return 1
    elif (checkWhichMarkWon(player)):
        return -1
    elif (checkDraw()):
        return 0

    if (isMaximizing):
        bestScore = -800
        for key in board.keys():
            if (board[key] == ' '):
                board[key] = bot
                score = minimax(board, False)
                board[key] = ' '
                if (score > bestScore):
                    bestScore = score
        return bestScore

    else:
        bestScore = 800
        for key in board.keys():
            if (board[key] == ' '):
                board[key] = player
                score = minimax(board, True)
                board[key] = ' '
                if (score < bestScore):
                    bestScore = score
        return bestScore
        
        
def playerMove():
    position = int(input("Enter the position for 'O':  "))
    insertLetter(player, position)
    return
    
    
board = {1: ' ', 2: ' ', 3: ' ',4: ' ', 
         5: ' ', 6: ' ',7: ' ', 8: ' ',
         9: ' ',10: ' ',11: ' ',12: ' ',
         13: ' ' ,14: ' ',15: ' ',16: ' '}

printBoard(board)
print("Computer goes first! Good luck.")
print("Positions are as follow:")
print("1, 2, 3, 4")
print("5, 6, 7, 8")
print("9,10,11,12")
print("\n")
player = 'O'
bot = 'X'

global firstComputerMove
firstComputerMove = True

while not checkForWin():
    if firstComputerMove:
        compMove()
        if not checkForWin() and not checkDraw():
            playerMove()
    else:
        playerMove()
        if not checkForWin() and not checkDraw():
            compMove()
        

